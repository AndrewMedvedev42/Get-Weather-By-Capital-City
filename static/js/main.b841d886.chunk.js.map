{"version":3,"sources":["Components/ForecastSlot.jsx","App.js","reportWebVitals.js","index.js"],"names":["ForecastSlot","itemsToRender","name","useState","reqData","setReqData","capitalCityName","setcapitalCityName","country","setCountry","reqLink","calcDay","day","useEffect","trackPromise","fetch","then","res","json","data","console","log","capitalCity","capital","catch","err","alert","forecast","map","item","temperature","wind","className","description","App","countryName","setCountryName","setName","LoadingIndicator","props","usePromiseTracker","promiseInProgress","type","onChange","e","target","value","autoComplete","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gOA6EeA,MAzEf,YAA+B,IAqCvBC,EArCeC,EAAO,EAAPA,KACrB,EAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA8CF,qBAA9C,mBAAOG,EAAP,KAAwBC,EAAxB,KACA,EAA8BJ,mBAAS,IAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KAGQC,EAAO,gDAA4CR,GAqBzD,SAASS,EAAQC,GACb,OAAU,GAAPA,EACQ,WACK,GAAPA,EACE,iBAEA,+BAiBjB,OA3CEC,qBAAU,WACRC,uBACMC,MAAML,GACLM,MAAK,SAACC,GAAO,OAAOA,EAAIC,UAEtBF,MAAK,SAACG,GACHC,QAAQC,IAAIF,GACZ,IAAMG,EAAcH,EAAK,GAAGI,QAK5B,OAHEd,EAAWU,EAAK,IAChBZ,EAAmBe,GAEdP,MAAM,2CAAD,OAA4CO,OAC3DN,MAAK,SAACC,GAAO,OAAOA,EAAIC,UAC1BF,MAAK,SAACG,GACHC,QAAQC,IAAIF,GACZd,EAAWc,MACZK,OAAM,SAACC,GAAD,OAAOC,MAAMD,SAC5B,CAACf,IAaCN,EAAQuB,SACV1B,EAAgBG,EAAQuB,SAASC,KAAI,SAAAC,GACnC,IAAOjB,EAA0BiB,EAA1BjB,IAAKkB,EAAqBD,EAArBC,YAAaC,EAAQF,EAARE,KACzB,OAAO,sBAAKC,UAAU,eAAf,UACK,6BAAKrB,EAAQC,KACb,wCAAWkB,KACX,wCAAWC,OAHmBnB,MAO5CQ,QAAQC,IAAI,eAGZ,cAAC,IAAD,UACE,0BAASW,UAAU,iBAAnB,UACA,0BAASA,UAAU,4BAAnB,UACI,uCAAQxB,EAAQN,KAAhB,aAAyBI,KACzB,6BAAKF,EAAQ6B,cACb,wCAAW7B,EAAQ0B,eACnB,wCAAW1B,EAAQ2B,WAGvB,0BAASC,UAAU,YAAnB,UACI,gDACA,qBAAKA,UAAU,kBAAf,SACK/B,a,MC1BFiC,MAnCf,WACE,MAAsC/B,qBAAtC,mBAAOgC,EAAP,KAAoBC,EAApB,KACA,EAAwBjC,mBAAS,OAAjC,mBAAOD,EAAP,KAAamC,EAAb,KAEMC,EAAmB,SAAAC,GAEvB,OAD8BC,8BAAtBC,mBAGN,oBAAIT,UAAU,2BAAd,iDAaJ,OADAZ,QAAQC,IAAIc,GAEV,0BAASH,UAAU,cAAnB,UACE,0BAASA,UAAU,yBAAnB,UACE,uBAAOU,KAAK,OAAOC,SAZP,SAACC,GACjBR,EAAeQ,EAAEC,OAAOC,QAWoBC,aAAa,OACrD,wBAAQC,QATG,WACfX,EAAQF,IAQJ,sBAEF,cAACG,EAAD,IACA,cAAC,EAAD,CAAcpC,KAAMA,QCtBX+C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnC,MAAK,YAAkD,IAA/CoC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.b841d886.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\nimport FadeIn from 'react-fade-in';\nimport { trackPromise } from 'react-promise-tracker';\n\nfunction ForecastSlot({name}) {\n  const [reqData, setReqData] = useState([])\n  const [capitalCityName, setcapitalCityName] = useState()\n  const [country, setCountry] = useState([])\n  \n\n    const reqLink = `https://restcountries.eu/rest/v2/name/${name}`\n    useEffect(()=>{\n      trackPromise(\n            fetch(reqLink)\n            .then((res)=>{return res.json()\n            })\n              .then((data)=>{ \n                  console.log(data);\n                  const capitalCity = data[0].capital\n\n                    setCountry(data[0])\n                    setcapitalCityName(capitalCity)\n\n                  return fetch(`https://goweather.herokuapp.com/weather/${capitalCity}`)\n            }).then((res)=>{return res.json()})\n            .then((data)=>{ \n                console.log(data);\n                setReqData(data)\n            }).catch((err)=>alert(err)))\n    },[reqLink])\n\n    function calcDay(day){\n        if(day == 1){\n            return \"Tommorow\"\n        }else if(day == 2){\n            return \"After tommorow\"\n        }else{\n            return \"After the day after tomorrow\"\n        }\n    }\n\n    let itemsToRender;\n    if (reqData.forecast) {\n      itemsToRender = reqData.forecast.map(item => {\n        const {day, temperature, wind} = item\n        return(<div className=\"forecastSlot\" key={day}>\n                    <h1>{calcDay(day)}</h1>\n                    <h2>Temp: {temperature}</h2>\n                    <h2>Wind: {wind}</h2>\n                </div>) \n      });\n    }else{\n      console.log(\"No forecast\");\n    }\n  return (\n      <FadeIn>\n        <section className=\"weatherDetails\">\n        <article className=\" slotstyle currentWeather\">\n            <h1>{`${country.name}: ${capitalCityName}`}</h1>\n            <h2>{reqData.description}</h2>\n            <h2>Temp: {reqData.temperature}</h2>\n            <h2>Wind: {reqData.wind}</h2>\n        </article>\n       \n        <section className=\"slotstyle\">\n            <h1>Daily Forecast</h1>\n            <div className=\"forecastSection\">\n                {itemsToRender}\n            </div>\n        </section>     \n    </section>\n      </FadeIn>\n\n  );\n}\n\n\nexport default ForecastSlot;","import { useState } from \"react\";\nimport ForecastSlot from \"./Components/ForecastSlot\"\nimport \"./styles/css/index.css\"\nimport { usePromiseTracker } from \"react-promise-tracker\";\n\n\nfunction App() {\n  const [countryName, setCountryName] = useState()\n  const [name, setName] = useState(\"Usa\")\n\n  const LoadingIndicator = props => {\n    const { promiseInProgress } = usePromiseTracker();\n    return (\n      promiseInProgress &&\n      <h1 className=\"loadingMessage slotstyle\">Hey some async call in progress ! </h1>\n  );  \n  }\n\n  const onChanges = (e) =>{\n    setCountryName(e.target.value)\n  }\n\n  const onClicks = ()=>{\n    setName(countryName)\n  }\n\n  console.log(countryName);\n  return (\n    <section className=\"mainSection\">\n      <section className=\"slotstyle inputSection\">\n        <input type=\"text\" onChange={onChanges} autoComplete=\"on\"/>\n        <button onClick={onClicks}>Press</button>\n      </section>\n      <LoadingIndicator/>\n      <ForecastSlot name={name}/>\n    </section>\n  );\n}\n\n\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}